# -*- coding: utf-8 -*-
"""AddressBarFeatures

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13CN7JKczZw61TlfAUdRkUKg6EZKwr7YD
"""

import pandas as pd

# -1 = phishing
#  0 = suspicious
#  1 = legitimate


# Load the input CSV file
input_csv = "RAW_Parsed.csv"
output_csv = "output.csv"

# Read the CSV file into a DataFrame
df = pd.read_csv(input_csv)

# New columns

df['having_IP_Address'] = df['having_IP_Address'].apply(lambda x: -1 if x == 1 else 1 if x == 0 else x)

df['URL_Length'] = df['URL_Length'].apply(
    lambda x: 1 if x < 54 else 0 if 54 <= x <= 75 else -1
)

df['Shortining_Service'] = df['Shortining_Service'].apply(
    lambda x: -1 if x == 1 else 1 if x == 0 else x
)

df['having_At_Symbol'] = df['having_At_Symbol'].apply(
    lambda x: -1 if x == 1 else 1 if x == 0 else x
)

def check_redirecting(url):
    # Find the position of the last occurrence of "//"
    last_double_slash_pos = url.rfind("//")
    # Determine if it's phishing or legitimate based on the position
    if last_double_slash_pos > 7:  # Redirecting occurs after the 7th position
        return -1  # Phishing
    else:
        return 1  # Legitimate
df['double_slash_redirecting'] = df['URL'].apply(check_redirecting)

df['Prefix_Suffix'] = df['Prefix_Suffix'].apply(
    lambda x: -1 if x == 1 else 1 if x == 0 else x
)

def check_sub_domain(dots_count):
    if dots_count == 1:
        return 1  # Legitimate
    elif dots_count == 2:
        return 0  # Suspicious
    else:
        return -1  # Phishing

# Apply the function to the 'having_Sub_Domain' column and create a transformed column
df['having_Sub_Domain'] = df['having_Sub_Domain'].apply(check_sub_domain)

# Function to classify based on domain registration length
def classify_domain_registration_length(expiry_days):
    if expiry_days <= 365:
        return -1  # Phishing
    else:
        return 1  # Legitimate

# Apply the function to the 'Domain_registration_length' column
df['Domain_registeration_length'] = df['Domain_registeration_length'].apply(classify_domain_registration_length)

df['Favicon'] = df['Favicon'].apply(
    lambda x: -1 if x == 1 else 1 if x == 0 else x
)

def classify_https_token_in_domain(url):
    # Extract the domain part of the URL
    domain = url.split("//")[-1].split("/")[0]  # Get the domain from the URL
    if "https" in domain.lower():  # Check if "https" exists in the domain (case-insensitive)
        return -1  # Phishing
    else:
        return 1  # Legitimate

# Apply the function to the 'URL' column
df['HTTPS_token'] = df['URL'].apply(classify_https_token_in_domain)

# Save the modified DataFrame to a new CSV file
df.to_csv(output_csv, index=False)

print(f"Transformed CSV saved to {output_csv}")